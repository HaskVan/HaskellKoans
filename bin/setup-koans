#!/usr/bin/env runhaskell
import Control.Monad (unless)
import qualified System.Process as S
import qualified System.Exit as S

sh :: String -> IO ()
sh cmd = do
  x <- S.system cmd
  case x of
       S.ExitFailure _ -> error $ "[ERROR]" ++ cmd ++ " failed."
       _ -> return ()

hasCabalDev :: IO Bool
hasCabalDev = do
  result <- S.system "which cabal-dev"
  case result of
       S.ExitFailure _ -> return False
       _ -> return True

main :: IO ()
main = do
  isCabalDevPresent <- hasCabalDev
  unless isCabalDevPresent $ do
    sh "cabal update"
    sh "cabal install cabal-dev"
    putStrLn ""
    putStrLn "NOTE: Add cabal binary files dir to your $PATH"
    putStrLn ""
    S.exitFailure
  sh "cabal-dev install --only-dependencies"
  sh "cabal-dev configure"
